// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_parse_html/model/video_list8_bean_entity.dart';
import 'package:flutter_parse_html/generated/json/video_list8_bean_entity_helper.dart';
import 'package:flutter_parse_html/model/j_d_search_list_entity.dart';
import 'package:flutter_parse_html/generated/json/j_d_search_list_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case VideoList8BeanEntity:
				return videoList8BeanEntityFromJson(data as VideoList8BeanEntity, json) as T;
			case JDSearchListEntity:
				return jDSearchListEntityFromJson(data as JDSearchListEntity, json) as T;
			case JDSearchListData:
				return jDSearchListDataFromJson(data as JDSearchListData, json) as T;
			case JDSearchListDataSearchm:
				return jDSearchListDataSearchmFromJson(data as JDSearchListDataSearchm, json) as T;
			case JDSearchListDataSearchmParagraph:
				return jDSearchListDataSearchmParagraphFromJson(data as JDSearchListDataSearchmParagraph, json) as T;
			case JDSearchListDataSearchmParagraphContent:
				return jDSearchListDataSearchmParagraphContentFromJson(data as JDSearchListDataSearchmParagraphContent, json) as T;
			case JDSearchListDataSearchmParagraphCoupon:
				return jDSearchListDataSearchmParagraphCouponFromJson(data as JDSearchListDataSearchmParagraphCoupon, json) as T;
			case JDSearchListDataSearchmParagraphCouponD:
				return jDSearchListDataSearchmParagraphCouponDFromJson(data as JDSearchListDataSearchmParagraphCouponD, json) as T;
			case JDSearchListDataSearchmParagraphPfdt:
				return jDSearchListDataSearchmParagraphPfdtFromJson(data as JDSearchListDataSearchmParagraphPfdt, json) as T;
			case JDSearchListDataSearchmParagraphOldWareInfo:
				return jDSearchListDataSearchmParagraphOldWareInfoFromJson(data as JDSearchListDataSearchmParagraphOldWareInfo, json) as T;
			case JDSearchListDataSearchmParagraphPinGou:
				return jDSearchListDataSearchmParagraphPinGouFromJson(data as JDSearchListDataSearchmParagraphPinGou, json) as T;
			case JDSearchListDataSearchmParagraphPriceReal:
				return jDSearchListDataSearchmParagraphPriceRealFromJson(data as JDSearchListDataSearchmParagraphPriceReal, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case VideoList8BeanEntity:
				return videoList8BeanEntityToJson(data as VideoList8BeanEntity);
			case JDSearchListEntity:
				return jDSearchListEntityToJson(data as JDSearchListEntity);
			case JDSearchListData:
				return jDSearchListDataToJson(data as JDSearchListData);
			case JDSearchListDataSearchm:
				return jDSearchListDataSearchmToJson(data as JDSearchListDataSearchm);
			case JDSearchListDataSearchmParagraph:
				return jDSearchListDataSearchmParagraphToJson(data as JDSearchListDataSearchmParagraph);
			case JDSearchListDataSearchmParagraphContent:
				return jDSearchListDataSearchmParagraphContentToJson(data as JDSearchListDataSearchmParagraphContent);
			case JDSearchListDataSearchmParagraphCoupon:
				return jDSearchListDataSearchmParagraphCouponToJson(data as JDSearchListDataSearchmParagraphCoupon);
			case JDSearchListDataSearchmParagraphCouponD:
				return jDSearchListDataSearchmParagraphCouponDToJson(data as JDSearchListDataSearchmParagraphCouponD);
			case JDSearchListDataSearchmParagraphPfdt:
				return jDSearchListDataSearchmParagraphPfdtToJson(data as JDSearchListDataSearchmParagraphPfdt);
			case JDSearchListDataSearchmParagraphOldWareInfo:
				return jDSearchListDataSearchmParagraphOldWareInfoToJson(data as JDSearchListDataSearchmParagraphOldWareInfo);
			case JDSearchListDataSearchmParagraphPinGou:
				return jDSearchListDataSearchmParagraphPinGouToJson(data as JDSearchListDataSearchmParagraphPinGou);
			case JDSearchListDataSearchmParagraphPriceReal:
				return jDSearchListDataSearchmParagraphPriceRealToJson(data as JDSearchListDataSearchmParagraphPriceReal);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (VideoList8BeanEntity).toString()){
			return VideoList8BeanEntity().fromJson(json);
		}
		if(type == (JDSearchListEntity).toString()){
			return JDSearchListEntity().fromJson(json);
		}
		if(type == (JDSearchListData).toString()){
			return JDSearchListData().fromJson(json);
		}
		if(type == (JDSearchListDataSearchm).toString()){
			return JDSearchListDataSearchm().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraph).toString()){
			return JDSearchListDataSearchmParagraph().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphContent).toString()){
			return JDSearchListDataSearchmParagraphContent().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphCoupon).toString()){
			return JDSearchListDataSearchmParagraphCoupon().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphCouponD).toString()){
			return JDSearchListDataSearchmParagraphCouponD().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphPfdt).toString()){
			return JDSearchListDataSearchmParagraphPfdt().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphOldWareInfo).toString()){
			return JDSearchListDataSearchmParagraphOldWareInfo().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphPinGou).toString()){
			return JDSearchListDataSearchmParagraphPinGou().fromJson(json);
		}
		if(type == (JDSearchListDataSearchmParagraphPriceReal).toString()){
			return JDSearchListDataSearchmParagraphPriceReal().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<VideoList8BeanEntity>[] is M){
			return data.map<VideoList8BeanEntity>((e) => VideoList8BeanEntity().fromJson(e)).toList() as M;
		}
		if(<JDSearchListEntity>[] is M){
			return data.map<JDSearchListEntity>((e) => JDSearchListEntity().fromJson(e)).toList() as M;
		}
		if(<JDSearchListData>[] is M){
			return data.map<JDSearchListData>((e) => JDSearchListData().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchm>[] is M){
			return data.map<JDSearchListDataSearchm>((e) => JDSearchListDataSearchm().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraph>[] is M){
			return data.map<JDSearchListDataSearchmParagraph>((e) => JDSearchListDataSearchmParagraph().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphContent>[] is M){
			return data.map<JDSearchListDataSearchmParagraphContent>((e) => JDSearchListDataSearchmParagraphContent().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphCoupon>[] is M){
			return data.map<JDSearchListDataSearchmParagraphCoupon>((e) => JDSearchListDataSearchmParagraphCoupon().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphCouponD>[] is M){
			return data.map<JDSearchListDataSearchmParagraphCouponD>((e) => JDSearchListDataSearchmParagraphCouponD().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphPfdt>[] is M){
			return data.map<JDSearchListDataSearchmParagraphPfdt>((e) => JDSearchListDataSearchmParagraphPfdt().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphOldWareInfo>[] is M){
			return data.map<JDSearchListDataSearchmParagraphOldWareInfo>((e) => JDSearchListDataSearchmParagraphOldWareInfo().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphPinGou>[] is M){
			return data.map<JDSearchListDataSearchmParagraphPinGou>((e) => JDSearchListDataSearchmParagraphPinGou().fromJson(e)).toList() as M;
		}
		if(<JDSearchListDataSearchmParagraphPriceReal>[] is M){
			return data.map<JDSearchListDataSearchmParagraphPriceReal>((e) => JDSearchListDataSearchmParagraphPriceReal().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}